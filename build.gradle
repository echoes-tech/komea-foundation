plugins {
  id "org.sonarqube" version "2.0.1"
  id "org.kordamp.markdown.convert" version "1.1.0"
}


/**
 * Package of dependencies
 */

apply from: "$gradleConfigUrl/git.gradle" 	// populates $branch

apply from: "$gradleConfigUrl/init.gradle" 	// populates $branch

apply from: "$gradleConfigUrl/project-reports.gradle"
apply from: "$gradleConfigUrl/java.gradle"
apply from: "$gradleConfigUrl/create-dirs.gradle"
apply from: "$gradleConfigUrl/groovy.gradle"
apply from: "$gradleConfigUrl/eclipse.gradle"
apply from: "$gradleConfigUrl/idea.gradle"
apply from: "$gradleConfigUrl/sonar.gradle"
apply from: "$gradleConfigUrl/nexus.gradle"
apply from: "$gradleConfigUrl/deppkg.gradle"
apply from: "$gradleConfigUrl/defaultdeps.gradle"
apply from: "$gradleConfigUrl/test.gradle"
apply from: "$gradleConfigUrl/findbugs.gradle"
apply from: "$gradleConfigUrl/jacoco.gradle"


//TEST FRAMEWORKS DEPENDENCIES
ext.JUNIT= "junit:junit:${TEST_JUNIT}"
ext.LOGGING = "ch.qos.logback:logback-classic:$LOG_LOGBACK"

allprojects {

    /** DEPENDENCIES */
    dependencies {

        compile "org.slf4j:slf4j-api:$LOG_SLF4J"
        compile "org.slf4j:jcl-over-slf4j:$LOG_SLF4J"
        compile "org.slf4j:log4j-over-slf4j:$LOG_SLF4J"

        compile "com.google.code.findbugs:jsr305:$FINDBUGS"
        compile "com.google.guava:guava:$GUAVA"
        compile "org.codehaus.groovy:groovy-all:${GROOVY_VERSION}"
        compile	"org.springframework.data:spring-data-mongodb:$SPRING_MONGO"

        compile "org.javers:javers-spring:$JAVERS"
        compile "org.javers:javers-persistence-mongo:$JAVERS"

        compile "org.jboss.resteasy:resteasy-client:3.0.9.Final"
        compile "org.jboss.resteasy:resteasy-jaxrs:3.0.13.Final"
        compile "org.jboss.resteasy:resteasy-jackson-provider:3.0.13.Final"
        compile "org.jboss.resteasy:resteasy-jaxb-provider:3.0.13.Final"
        
        compile "org.mongodb:mongo-java-driver:$MONGO_DRIVER"
        compile "com.github.fakemongo:fongo:$FONGO"

        testCompile("org.spockframework:spock-core:$TEST_SPOCK") { exclude group: 'junit' }
        testCompile("org.spockframework:spock-spring:$TEST_SPOCK") { exclude group: 'junit' }
        testCompile("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")

        testCompile "org.springframework.security:spring-security-test:$SPRING_SECU"

        testCompile "com.jayway.jsonpath:json-path:$TEST_JAYWAY_JSONPATH"
        testCompile "com.jayway.jsonpath:json-path-assert:$TEST_JAYWAY_JSONPATH"

    }



}

sonarqube {
    properties {
        property "sonar.exclusions", "**/static/**"
    }
}


task wrapper(type: Wrapper) { gradleVersion = GRADLE_VERSION }

