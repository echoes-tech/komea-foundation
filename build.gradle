/**
 * Package of dependencies
 */


println "---------------------------------------------------------------------------------------"
println "How to use Komea build script :                                                        "
println "HINT : To print unit tests logs uses -PlogTest"
println "HINT : To compile outside Echoes/Lab building, use -Premote"
println "HINT : To upload to bintray , set the properties         -Dbintray_net_user= -Dbintray_net_key="
println "---------------------------------------------------------------------------------------"



apply from: "$rootProject.projectDir/config/git.groovy"

apply from: "$rootProject.projectDir/config/sonar.groovy"


allprojects {

	apply plugin: "java"
	apply plugin: "maven"
	apply plugin: "eclipse"
	apply plugin: "idea"
	apply plugin: "project-report"
	apply plugin: 'jacoco'
	apply plugin: 'findbugs'
	apply plugin: 'maven-publish'
	apply plugin: 'groovy'
}

apply from: "$rootProject.projectDir/config/nexus.groovy"
apply from: "$rootProject.projectDir/config/deppkg.groovy"
apply from: "$rootProject.projectDir/config/defaultdeps.groovy"
apply from: "$rootProject.projectDir/config/test.groovy"
apply from: "$rootProject.projectDir/config/findbugs.groovy"
apply from: "$rootProject.projectDir/config/jacoco.groovy"


allprojects {


	/** JAVA COMPILATION */
	compileJava {
		//enable compilation in a separate daemon process
		// options.fork = true
		sourceCompatibility = 1.7
		targetCompatibility = 1.7
		//enable incremental compilation
		//options.incremental = true
	}



	/** CONFIGURATIONS */
	configurations { provided }

	sourceSets {
		main {
			compileClasspath += configurations.provided
			runtimeClasspath += configurations.provided
		}


		test {
			compileClasspath += configurations.provided
			runtimeClasspath += configurations.provided
		}
	}

	if (project.hasProperty("depcheck")) {
		configurations.all {

			resolutionStrategy { failOnVersionConflict() }
		}
	}
        

	task print <<  { println "$rootProject.buildDir.path" }

	task "create-dirs" << {
		sourceSets*.java.srcDirs*.each { it.mkdirs() }
		sourceSets*.resources.srcDirs*.each { it.mkdirs() }
	}

	tasks.withType(JavaCompile) { options.incremental = true }
}

/**
 Documentation
 : http://stackoverflow.com/questions/9547170/in-gradle-how-do-i-declare-common-dependencies-in-a-single-place
 : http://gradle.codehaus.org/Cookbook
 : http://stackoverflow.com/questions/8343871/mark-gradle-build-unstable-in-jenkins-when-junit-tests-fail
 */


task wrapper(type: Wrapper) { gradleVersion = GRADLE_VERSION }
