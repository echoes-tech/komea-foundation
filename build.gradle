/**
 * Package of dependencies
 */


println "---------------------------------------------------------------------------------------"
println "How to use Komea build script :                                                        "
println "HINT : To print unit tests logs uses -PlogTest"
println "HINT : To compile outside Echoes/Lab building, use -Premote"
println "HINT : To upload to bintray , set the properties         -Dbintray_net_user= -Dbintray_net_key="
println "---------------------------------------------------------------------------------------"

//TEST FRAMEWORKS DEPENDENCIES
ext.JUNIT= "junit:junit:${TEST_JUNIT}"
ext.LOGGING = "ch.qos.logback:logback-classic:$LOG_LOGBACK"
ext.tests_frameworks = [
    JUNIT,
    "org.mockito:mockito-core:${TEST_MOCKITO}",
	"org.powermock:powermock-mockito-release-full:${TEST_POWERMOCK}",
	"org.powermock:powermock-module-junit4-rule:${TEST_POWERMOCK}",
	"org.powermock:powermock-classloading-xstream:${TEST_POWERMOCK}",
	"cglib:cglib-nodep:${TEST_CGLIB}",
	"org.hamcrest:hamcrest-core:${TEST_HAMCREST}",
	"org.objenesis:objenesis:${TEST_OBJENESIS}",
	"com.tocea.frameworks:bench4j-core:${TEST_BENCH4J}",
	"com.tocea.frameworks:bench4j-htmlreport:${TEST_BENCH4J}"
]

ext.GIT = "git"
ext.nexusURL = "http://zeus.tocea.local:8081"

if (project.hasProperty('remote')) {
    ext.nexusURL = "http://scm.tocea.com:90"
    println ("WARNING : Utilisation de Nexus en remote $nexusURL")
} else {
    println ("WARNING : Utilisation de Nexus en local (Echoes/Lab) $nexusURL")
}

if (project.version.endsWith('-SNAPSHOT')) {
  ext.isRelease = false
}else{
  ext.isRelease = true
}

def getGitBranch()  {

    def gitExe = GIT

    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            executable = GIT
            args = [
				'rev-parse',
				'--abbrev-ref',
				'HEAD'
            ]
            standardOutput = stdout
        }
        def currentBranch = stdout.toString().trim()

        return currentBranch
    } catch(Exception e) {
        return "local"
    }
}

/**
Specific parent plugin
 */
apply plugin: "sonar-runner"

sonarRunner {
    // toolVersion = "2.4"

    // Fine grained control over the runner process
    //    forkOptions {
    //        maxHeapSize = '1024m'
    //    }
    sonarProperties {
        property "sonar.host.url", sonarURL
        property "sonar.jdbc.url", sonarJDBC
        property "sonar.jdbc.driverClassName", "com.mysql.jdbc.Driver"
        property "sonar.jdbc.username", sonarUser
        property "sonar.jdbc.password", sonarPassword
        property "sonar.branch", getGitBranch()
    }
}


allprojects {

    apply plugin: "java"
    apply plugin: "maven"
    apply plugin: "eclipse"
    apply plugin: "idea"
    apply plugin: "project-report"
    apply plugin: 'jacoco'
    apply plugin: 'findbugs'
    apply plugin: 'maven-publish'
    apply plugin: 'groovy'

    /** REPOSITORIES */
    repositories {

        mavenLocal()
        if (project.hasProperty('remote')) {
            mavenCentral()
            jcenter()
        }

        maven {
            credentials {
                username mavenUser
                password mavenPassword
            }
            // Release EchoesLabs (remote)
            url nexusURL + "/nexus/content/groups/echoes-lab-release"

        }
        maven {
            credentials {
                username mavenUser
                password mavenPassword
            }
            // Release EchoesLabs (local)
            url nexusURL + "/nexus/content/groups/echoes-lab-release"

        }

        maven { url "http://dl.bintray.com/sleroy/maven" }

    }


    /** JAVA COMPILATION */
    compileJava {
        //enable compilation in a separate daemon process
        options.fork = true
        sourceCompatibility = 1.7
        targetCompatibility = 1.7
        //enable incremental compilation
        options.incremental = true
    }



    /** CONFIGURATIONS */
    configurations { provided }

    sourceSets {
        main {
            compileClasspath += configurations.provided
            runtimeClasspath += configurations.provided
        }


        test {
            compileClasspath += configurations.provided
            runtimeClasspath += configurations.provided
        }

    }

    if (project.hasProperty("depcheck")) {
        configurations.all {

            resolutionStrategy { failOnVersionConflict() }
        }
    }

    configurations.all {
        resolutionStrategy { //        force    'org.objenesis:objenesis:1.3'
            force JUNIT }
    }


    /** DEPENDENCIES */
    dependencies {

        compile "org.slf4j:slf4j-api:$LOG_SLF4J"
        compile "org.slf4j:jcl-over-slf4j:$LOG_SLF4J"
        compile "org.slf4j:log4j-over-slf4j:$LOG_SLF4J"

        compile "com.google.code.findbugs:jsr305:$FINDBUGS"
        compile "com.google.guava:guava:$GUAVA"
        compile "org.codehaus.groovy:groovy-all:${GROOVY_VERSION}"
        compile	"org.springframework.data:spring-data-mongodb:$SPRING_MONGO"

        compile "org.javers:javers-spring:$JAVERS"
        compile "org.javers:javers-persistence-mongo:$JAVERS"

        compile "org.mongodb:mongo-java-driver:$MONGO_DRIVER"
        compile "com.github.fakemongo:fongo:$FONGO"
        testCompile "com.lordofthejars:nosqlunit-mongodb:$TEST_NOSQLUNIT"

        compile "org.komea.dashboard:client-timeseries-storage:$CLIENT_TIMESERIES_STORAGE"

        testCompile LOGGING

        testCompile tests_frameworks // TEST FRAMEWORKS

        testCompile("org.easymock:easymock:${TEST_EASYMOCK}") { exclude group: 'org.objenesis' }
        testRuntime "org.apache.logging.log4j:log4j-core:${LOG4J}"

        testCompile("org.spockframework:spock-core:$TEST_SPOCK") { exclude group: 'junit' }
        testCompile("org.spockframework:spock-spring:$TEST_SPOCK") { exclude group: 'junit' }
        testCompile("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")

        testCompile "org.springframework.security:spring-security-test:$SPRING_SECU"

        testCompile "com.jayway.jsonpath:json-path:$TEST_JAYWAY_JSONPATH"
        testCompile "com.jayway.jsonpath:json-path-assert:$TEST_JAYWAY_JSONPATH"

    }


    task unitTest(type : Test) { exclude "**/**IT" }


    /** TESTS */
    jacoco {
      toolVersion = '0.7.1.201405082137'
    }

    test {

        // exclude Selenium Tests
        useJUnit {
          excludeCategories 'fr.echoes.labs.ksf.foundation.tests.SeleniumTests'
          excludeCategories 'fr.echoes.labs.ksf.foundation.tests.SmokeTests'
        }

        if (project.hasProperty("logTest")) {
            // listen to events in the test execution lifecycle
            beforeTest { descriptor ->
                logger.lifecycle("Running test: " + descriptor)

            }
            // listen to standard out and standard error of the test JVM(s)
            onOutput { descriptor, event ->
                logger.lifecycle("Test: " + descriptor + " : " + event.message )
            }
            // show standard out and standard error of the test JVM(s) on the console
            testLogging.showStandardStreams = true

        }

        // set heap size for the test JVM(s)
        minHeapSize = "128m"
        maxHeapSize = "512m"

        // set JVM arguments for the test JVM(s)
        jvmArgs '-XX:MaxPermSize=256m'

    }


    task print <<  { println "$rootProject.buildDir.path" }

    task "create-dirs" << {
        sourceSets*.java.srcDirs*.each { it.mkdirs() }
        sourceSets*.resources.srcDirs*.each { it.mkdirs() }
    }

    tasks.withType(JavaCompile) { options.incremental = true }

    /** FINDBUGS -------------------------------------------------------------- */

    // Marker Task to enable findbugs.
    task findbugs(
        group: "Verification",
        description: """Marker task to enabled findbugs. Findbugs is by default
                        disabled. E.g. ( ./gradlew findbugs build )"""
    )

    gradle.taskGraph.whenReady { taskGraph ->
        tasks.findbugsMain.onlyIf { taskGraph.hasTask((tasks.findbugs)) }
        tasks.findbugsTest.onlyIf { taskGraph.hasTask((tasks.findbugs)) }
    }

    findbugs {
        ignoreFailures = true
        effort = "max"

    }

    tasks. withType(FindBugs) {
        reports { xml.enabled=true }
    }

    /** UPLOAD ARCHIVES */
    uploadArchives {
        def publishURL = nexusURL+"/nexus/content/repositories/ksf"
        if (!isRelease) {
          publishURL += "-snapshots"
        }
        repositories {
            mavenDeployer {
                repository(url: publishURL)
                {
                    authentication(userName: mavenUser, password: mavenPassword)
                }
            }
        }
    }

}

subprojects {

    jacocoTestReport {
        reports {
            html.enabled = true
            xml.enabled = true
            csv.enabled = false
        }
    }

    task smokeTest(type: Test) {
      useJUnit {
        includeCategories 'fr.echoes.labs.ksf.foundation.tests.SmokeTests'
      }
    }

    task seleniumTest(type: Test) {
        useJUnit {
          includeCategories 'fr.echoes.labs.ksf.foundation.tests.SeleniumTests'
        }
    }
}


task jacocoRootReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
    dependsOn = subprojects.test
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(subprojects.sourceSets.main.output)
    executionData = files(subprojects.jacocoTestReport.executionData)
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
        xml.destination = "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    }
    onlyIf = { true }
    doFirst {
        executionData = files(executionData.findAll { it.exists() })
    }

    tasks.withType(Test) {
        ignoreFailures=project.hasProperty("ignoreTestFailures")
    }

}

/**
Documentation
: http://stackoverflow.com/questions/9547170/in-gradle-how-do-i-declare-common-dependencies-in-a-single-place
: http://gradle.codehaus.org/Cookbook
: http://stackoverflow.com/questions/8343871/mark-gradle-build-unstable-in-jenkins-when-junit-tests-fail
 */


task wrapper(type: Wrapper) { gradleVersion = GRADLE_VERSION }
